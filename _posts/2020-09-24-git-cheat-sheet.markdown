---
layout: post
title:  "गिट चिट सीट"
date:   2020-09-24 00:00:00 +0545
---
### गिट सेटअप (कन्फीगर)

गिटलाई ईन्सटल गर्ने बित्तिकै एक पटक आफु को हो भनेर (गिटलाई) चिनाउनको लागी तल दिएको कन्फ्रीगेशन गर्नु पर्दछ । त्यस पछी युुजर परिवर्तन नहुञ्जेल वा आफु अर्कै आईडेन्टीटीले काम गर्छु नभनुञ्जेल यसलाई परिवर्तन गर्न पर्दैन । 

```
git config --global user.name “[firstname lastname]”
```
कुन युजरले गिट कमिट एड गर्छ त्यसको लग राख्नको लागी सबै भन्दा पहिले युजर एड गर्नु पर्छ । 
```
git config --global user.email “[valid-email]”
```
कुन युजरले गिट कमिट एड गर्छ त्यसको लग राख्नको लागी उसको ईमेल सेट गरिन्छ । 

> प्रो टिप्स : अब गिट चलाउनु अगि आफु कुन युजरको रुपमा चलाउन लागेको छु भनेर थाहा पाउनको लागि git config --list कमाण्डको प्रयोग गर्नु पर्दछ । दिएको भन्दा फरक परिचय लिएर आफु गिट कमिट गर्ने हो भने माथी दिए जस्तै युजर नेम / ईमेल परिवर्तन गर्नु पर्दछ । 

### गिट ईनिसियलाजेशन 

```
git init
```
गिट प्रोग्राम ईनिसलाईजेशन गर्नको लागी यो कमाण्ड प्रयोग गरिन्छ ।  जुन फोल्डरमा बसेर कामगर्ने हो त्यही फोल्डरमा पसेर गिट ईनिसियलाईज गर्नु पर्दछ । पहिलो पटक गिट ईनिसियलाईज गर्दा त्यो कमाण्डले त्यसै फोल्डर भित्र डट गिट भन्ने हिडन फोल्डर बनाउदछ  । त्यसमा फाईलको लग/कमिट हिष्ट्रीहरु सेभ भएर रहेको हुन्छ । 

> * $ git init [project name] * प्रो टिप्स : यस कमाण्डले लोकल रिपोजटरी निर्माण गर्दछ । प्रोजेक्टको नाम दिएको छ भने त्यस त्यस प्रोजेक्टको नामको फोल्डर बनाएर त्यस भित्र त्यस फोल्डर भित्र गिट ईनिसियलाईज हुन्छ । यदी प्रोजेक्ट नेम दिएको छैन भने आफु जुन फोल्डर भित्र रहेको गिट कमाण्ड ईनिसियलाईज गरेको त्यही फोल्डर भित्र गिट कमाण्ड ईनिसियलाईज हुन्छ । 

```
git clone [url]
```
गिट सर्भरमा रहेको आफ्नो लोकल कम्प्युटरमा सार्नको लागी क्लोन गरिन्छ ।

### निरिक्षण र तुलना (INSPECT & COMPARE)

```
git log
```
एक्टीभ ब्राञ्चको कमिट हिस्ट्री हेर्न यस कमाण्डको प्रयोग गरिन्छ ।
```
git log branchB..branchA
```
माथीको उदारणमा ब्रान्च बि मा नभएको ब्राञ्च ए को कमिट हेर्नको लागी git log branchB..branchA कमाण्ड प्रयोग गरीन्छ ।
```
git diff branchB...branchA
```
माथीको उदारणमा ब्रान्च ए मा भएको तर ब्रान्च बी मा नभएको फरक (डिफरेन्स) हेर्नको लागी  git diff branchB..branchA कमाण्ड प्रयोग गरीन्छ । उदारणको लगाी कुनै दुई प्रयोगकर्ताले एकै फाईलाई अपडेट गरेछन भने ब्रान्च ए मा भएकोले ब्रान्च बि मा भएको भन्दा के कुरा चाँही फरक गरेछ त्यो हेर्नको लागी यसको प्रयोग गर्न सकिन्छ । 
```
git log --follow [file]
```
कमिट गरीएका फाईलहरुको कमिट हिष्ट्री हेर्नको लागी यस कमाण्ड प्रयोग गर्न सकिन्छ । उदारणको लागी git log --follow index.php कमाण्ड को प्रयोगले यदी index.php रिनेम गरिएको भए पहि हाल सम्म यो फाईलमा भएका सबै कमिटहरु देख्न सकिन्छ । 

```
git show [SHA]
```
गिटमा भएका कुनै पनि अब्जेक्टलाई ह्युमन रिडेबल फर्म्याटमा हेर्नको लागी यस कमाण्डको प्रयोग गर्न सकिन्छ । 
```
git rm [file]
```
